USE e_commerce;

-- 1. Standalone Aggregation CTE: Find the total number of orders placed by each customer  
WITH CTE_total_sales AS  
(  
    SELECT  
        customer_id,  
        COUNT(customer_id) AS totalOrdersByCustomers  
    FROM Orders  
    GROUP BY customer_id  
),  

-- 2. Standalone Aggregation CTE: Find the last order date for each customer  
CTE_last_order_date AS  
(  
    SELECT  
        customer_id,  
        MAX(order_date) AS last_order_date  
    FROM Orders  
    GROUP BY customer_id  
),  

-- 3. Nested Ranking CTE: Rank customers based on total orders  
CTE_rank_customers AS  
(  
    SELECT  
        customer_id,  
        totalOrdersByCustomers,  
        RANK() OVER(ORDER BY totalOrdersByCustomers DESC) AS customer_rank  
    FROM CTE_total_sales  
),  

-- 4. Transformation CTE: Segment customers based on the total number of orders  
CTE_Segment_customers AS  
(  
    SELECT  
        customer_id,  
        totalOrdersByCustomers,  
        CASE  
            WHEN totalOrdersByCustomers > 10 THEN 'High'  
            WHEN totalOrdersByCustomers > 5 THEN 'Medium'  
            ELSE 'Low'  
        END AS customer_segment  
    FROM CTE_total_sales  
)  

-- Final Query: Fetch customer details along with their total order count, last order date, rank, and segment  
SELECT  
    c.customer_id,  
    c.name AS customer_name,  
    COALESCE(cte.totalOrdersByCustomers, 0) AS totalOrdersByCustomers,  -- If no orders, show 0  
    COALESCE(cte1.last_order_date, '1900-01-01') AS last_order_date,  -- Default date for no orders  
    COALESCE(cte2.customer_rank, RANK() OVER(ORDER BY 0 DESC)) AS customer_rank,  -- Rank even if no orders  
    COALESCE(ct3.customer_segment, 'Low') AS customer_segment  -- Default segment for customers without orders  
FROM customers AS c  
LEFT JOIN CTE_total_sales AS cte  
ON c.customer_id = cte.customer_id  
LEFT JOIN CTE_last_order_date AS cte1  
ON c.customer_id = cte1.customer_id  
LEFT JOIN CTE_rank_customers AS cte2  
ON c.customer_id = cte2.customer_id  
LEFT JOIN CTE_Segment_customers AS ct3  
ON c.customer_id = ct3.customer_id;  



-- generate of sequence of number from 1 to 20
-- RECURSIVE QUERY 

-- Enable recursive query execution
WITH RECURSIVE Series AS 
(
    -- 1. Anchor Query: This initializes the series with the first number (1)
    SELECT 1 AS MyNumber  
    
    UNION ALL  
    
    -- 2. Recursive Query: This keeps adding 1 to MyNumber in each recursion
    SELECT MyNumber + 1  
    FROM Series  
    
    -- 3. Termination Condition: Stops recursion when MyNumber reaches 20
    WHERE MyNumber < 20  
)  

-- 4. Final Query: Retrieve all numbers generated by the recursive CTE
SELECT * FROM Series;







