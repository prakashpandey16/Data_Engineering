USE practice_problem;

-- SELECT * FROM  customers;
-- SELECT * FROM  orders;
-- SELECT * FROM product;
-- SELECT * FROM OrderDetails;
-- SELECT * FROM Employee;
-- SELECT * FROM Student;
-- SELECT * FROM Attendance;
-- SELECT * FROM Salary;

SELECT * FROM employee;

-- 1. Retrieve all employees whose salary is greater than 50,000 and belong to either 'IT'
-- or 'HR' department.
SELECT *
FROM employee
WHERE salary > 50000
AND LOWER(department) = "it" 
OR  LOWER(department) = "hr"
ORDER BY salary ASC;


-- 2. Select all products that are not in the 'Electronics' category and have a price greater
-- than 100.

SELECT * 
FROM product
WHERE price > 100
AND LOWER(category) <> 'electronics';


-- 3. Fetch customers who do not have a registered email.
SELECT * 
FROM customers 
WHERE email IS NULL;


-- 4. Retrieve orders where the status is either 'Pending' or 'Shipped', but not 'Cancelled'
SELECT * 
FROM orders
WHERE status IN ('Pending','Shipped');

-- 5. Find all students who have marks between 60 and 80 in Mathematics.

SELECT * 
FROM Student
WHERE marks BETWEEN 60 AND 80 
AND subject = 'Mathematics';

-- 6. Retrieve all employees whose joining date is between '2023-01-01' and
-- '2024-01-01'.

SELECT * 
FROM employee
WHERE join_date BETWEEN '2023-01-01' and '2024-01-01';

SELECT * 
FROM employee
WHERE join_date BETWEEN DATE('2023-01-01') and DATE('2024-01-01');

-- 7. Find all products that belong to any of the categories ('Fashion', 'Grocery',
-- 'Books').

SELECT * 
FROM product
WHERE category IN ('Fashion', 'Grocery','Books');

-- 8. Retrieve customers whose name starts with 'A' and ends with 'n'

SELECT * 
FROM customers 
WHERE name LIKE 'A%n';

-- 9. Get a list of employees whose phone numbers contain '987' anywhere.

SELECT *
FROM employee
WHERE phone_number LIKE '%987%';

-- 10. Fetch all customers whose email ID ends with '@gmail.com'.
SELECT * 
FROM customers
WHERE email LIKE '%@gmail.com';


-- 11. Find all employees who do not have a manager assigned.

SELECT *
FROM Employee
WHERE manager_id 
IS NULL;

-- 12. Retrieve all students whose date of birth is missing

SELECT * 
FROM student
WHERE birth_date IS NULL;

-- 13. Get all orders where the payment date is NULL but order status is 'Completed'.
SELECT *
FROM orders
WHERE payment_date IS NULL
AND status = 'Completed';


-- 14. Find customers whose phone number is not NULL.
SELECT *
FROM customers
WHERE phone_number IS NOT NULL;


-- 15. Identify all employees who don't have an assigned department.

SELECT * 
FROM Employee
WHERE department IS NULL;


-- 16. Fetch the top 5 highest-paid employees
SELECT * 
FROM employee
ORDER BY salary DESC
LIMIT 5;

SELECT DISTINCT salary,employee_id,name
FROM Employee 
ORDER BY salary DESC
LIMIT 5;


-- 17. Get the second and third highest salaries in the company
SELECT DISTINCT salary
FROM Employee
ORDER BY salary DESC
LIMIT 2 OFFSET 1;

-- 18. Retrieve the top 3 most expensive products in each category

SELECT *
FROM product;

SELECT name,category,price
FROM product
GROUP BY category
ORDER BY price DESC
LIMIT 3;


-- 19. Fetch the oldest 10 customers (based on account creation date).
SELECT id,name,account_date
FROM customers
ORDER BY account_date ASC
LIMIT 10;

-- 20. Get the 5th to 10th highest-selling products.
SELECT prod_name,COUNT(*) AS prod_count
FROM orders
GROUP BY prod_name
ORDER BY prod_count DESC
LIMIT 5 OFFSET 5;


-- 21. Find the total revenue generated by each product category.

SELECT category,SUM(price) AS total_revenue
FROM product
WHERE category IS NOT NULL
GROUP BY category
ORDER BY total_revenue;

-- 22. Get the average salary of employees in each department.
SELECT * FROM Employee;

SELECT department,ROUND(AVG(salary),2) AS avg_salary
FROM Employee
WHERE salary IS NOT NULL
GROUP BY department
ORDER BY avg_salary;

-- 23. Count how many orders have been placed in the last 6 months.
SELECT * FROM orders;
SELECT COUNT(order_id) AS order_count
FROM orders
WHERE order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH);

-- 24. Find the highest, lowest, and average price of products in each category.
SELECT category,MAX(price) AS highest_price,
MIN(price) AS lowest_price,
AVG(price) AS avg_price
FROM product 
WHERE category IS NOT NULL
GROUP BY category;


-- 25. Retrieve the total number of employees in each department
SELECT department,COUNT(*) AS employee_count
FROM Employee
WHERE department IS NOT NULL
GROUP BY department;


-- 26. Find the total revenue generated by each customer, but only for those customers
-- who have spent more than 10,000.

SELECT * FROM customers;
SELECT * FROM orders;

SELECT c.name AS customer_name, 
       SUM(o.amount) AS total_revenue
FROM customers AS c
INNER JOIN orders AS o
ON c.id = o.customer_id
GROUP BY c.name
HAVING SUM(o.amount) > 10000
ORDER BY total_revenue DESC;

-- 27. Get the number of employees in each department, but only for departments with
-- more than 5 employees

SELECT department,COUNT(*) AS employees_count
FROM Employee
GROUP BY department
HAVING COUNT(*) > 5;

-- 28. Retrieve cities with more than 50 registered users.
SELECT city_name,
COUNT(*) AS users_count
FROM users
GROUP BY city_name
HAVING COUNT(*) > 50;

-- 29. Find product categories where the average price of products is greater than 500

SELECT * FROM product;


SELECT category,
	AVG(price) AS avg_price
FROM product
WHERE category IS NOT NULL
GROUP BY category
HAVING AVG(price) > 500;
    

-- 30. Identify managers who oversee more than 3 employees
SELECT m.mang_id AS manager_id,
       e.emp_name AS manager_name,
       COUNT(e.emp_id) AS employees_overseen
FROM Employee AS e
JOIN managers AS m
ON e.emp_id = m.emp_id  -- Joining employees to their managers
JOIN Employee AS mgr
ON m.mang_id = mgr.emp_id  -- Ensuring managers are also employees
GROUP BY m.mang_id, manager_name
HAVING COUNT(e.emp_id) > 3;

-- 31. Convert all customer names to uppercase
SELECT * FROM Employee;

SELECT UPPER(name) 
FROM Employee;

-- 32. Extract the first three characters of each employee's last name

SELECT last_name,
SUBSTRING(last_name,1,3) AS first_three_character_last_name
FROM Employee;


-- 33. Find employees whose email domain is not 'gmail.com'.

SELECT emp_name
FROM employee
WHERE email NOT LIKE '%@gmail.com%';

-- 34. Concatenate first name and last name of all employees.
SELECT CONCAT_WS(' ',first_name,last_name) AS full_name
FROM Employee;

-- 35. Replace all occurrences of 'Ltd.' in company names with 'Limited'.

SELECT REPLACE(company_name,'Ltd.','Limited') AS updated_company_name
FROM Employee;

-- 36. Round all product prices to 2 decimal places
SELECT ROUND(price,2) AS new_price
 FROM product
 WHERE price IS NOT NULL ;
 
--  37. Get the absolute difference between the highest and lowest salaries.
 SELECT ABS(MAX(salary)-MIN(salary)) AS salary_difference
 FROM Employee;

-- 38. Find the modulus of salaries when divided by 5.

SELECT salary, MOD(salary, 5) AS salary_modulus
FROM Employee;


-- 39. Retrieve the ceiling value of all product prices.

SELECT price,CEIL(price) AS ceiling_price
FROM products;

-- 40. Find employees whose salary is a multiple of 5000.

SELECT *
FROM Employee
WHERE salary % 5000 = 0;

SELECT * FROM  customers;
SELECT * FROM  orders;
-- SELECT * FROM product;
-- SELECT * FROM OrderDetails;
-- SELECT * FROM Employee;
-- SELECT * FROM Student;
-- SELECT * FROM Attendance;
-- SELECT * FROM Salary;


-- 41. Retrieve all employees who joined in the last 6 months

SELECT * 
FROM Employee
WHERE join_date  >= DATE_SUB(CURRENT_DATE(),INTERVAL 6 MONTH);


-- 42. Find all customers whose birthday is today.

SELECT *
FROM customers
WHERE DAY(birth_date) = DAY(CURRENT_DATE()) 
AND MONTH(birth_date) = MONTH(CURRENT_DATE());


-- 43. Get the difference (in days) between order date and delivery date.


SELECT DATEDIFF(delivery_date,order_date)
AS diff_of_deliveryAndorder_date
FROM Orders;


-- 44. Fetch all orders placed in the last week of each month.

SELECT *
FROM orders
WHERE order_date BETWEEN DATE_SUB(LAST_DAY(order_date),INTERVAL 6 DAY) AND LAST_DAY(order_date);

-- 45. Convert all dates to YYYY-MM-DD format

SELECT DATE_FORMAT(order_date, '%Y-%m-%d') AS new_date
FROM orders;


-- 46. Find all employees who are either in the 'Sales' or 'Marketing' department (use
-- UNION)

(SELECT * FROM Employee
WHERE LOWER(department) = 'sales')
UNION
(SELECT * FROM Employee
WHERE LOWER(department) = 'marketing');


-- 47. Get a list of customers who have placed an order and also registered for a
-- newsletter (use INTERSECT).

SELECT 
	c.cust_name AS customer_name
FROM customers AS c
INNER JOIN orders AS o ON c.id = o.cust_id
INNER JOIN newsletters AS n ON c.id = n.cust_id;

-- 48. Retrieve employees who exist in one table but not in another (use EXCEPT)

SELECT 
	e.emp_name AS employee_name
FROM Employee AS e
LEFT JOIN department AS d
ON e.id = d.emp_id;


-- 49. Combine two different tables having similar structures. union all

SELECT c.cust_id AS id, c.cust_name AS name, 'Customer' AS source
FROM customers AS c
UNION ALL
SELECT o.id AS id, CAST(o.order_date AS CHAR) AS name, 'Order' AS source
FROM orders AS o;


-- 50. Identify students who have enrolled in two or more different courses

SELECT 
	s.stu_name AS student_name,
    COUNT(DISTINCT e.course_id) AS total_courses
FROM student AS s
INNER JOIN enrolled AS e
ON s.id = e.stu_id
GROUP BY student_name
HAVING COUNT(DISTINCT e.course_id) >=2;
 
 
 -- 51. Retrieve customer details along with their order details
 
 SELECT
	c.*,
    o.*
FROM customers AS c
INNER JOIN orders AS o
ON c.id = o.customer_id;

-- 52. Get a list of employees and their manager's name.

SELECT 
	e1.emp_name AS employee_name,
    e2.emp_name AS manager_name
FROM Employee AS e1
JOIN Employee AS e2
ON e1.manager_id = e2.id;
    

-- 53. Find all products along with their category name.
SELECT 
	p.prod_id AS product_id,
    p.prod_name AS product_name,
    c.category AS category_name
FROM product AS p
INNER JOIN category AS c
ON p.category_id= c.id;

-- 54. Fetch all employees who have not been assigned to any department

SELECT e.*
FROM Employee AS e
LEFT JOIN department AS d
ON e.dept_id = d.id
WHERE d.id IS NULL;

-- 55. Get a list of customers who have placed at least one order.

SELECT 
    c.id AS customer_id,
    c.cust_name AS customer_name,
    COUNT(DISTINCT o.order_id) AS total_orders
FROM customers AS c
INNER JOIN orders AS o
ON c.id = o.cust_id
GROUP BY c.id, c.cust_name;
-- SELECT * FROM  customers;
-- SELECT * FROM  orders;
-- SELECT * FROM product;
-- SELECT * FROM OrderDetails;
-- SELECT * FROM Employee;
-- SELECT * FROM Student;
-- SELECT * FROM Attendance;
-- SELECT * FROM Salary;

SET SQL_SAFE_UPDATES = 0;


-- 56. Update the salary of all employees in the 'IT' department by 10%.
SELECT *
FROM Employee;

UPDATE Employee 
set salary = salary + (salary*10)/100
WHERE department = "IT";

-- 57. Change all NULL phone numbers to 'Not Provided'
UPDATE Employee 
SET phone_number = 'Not Provided'
WHERE phone_number IS NULL;

-- 58. Modify the column 'salary' from INT to DECIMAL(10,2).

ALTER TABLE Employee
 MODIFY COLUMN salary DECIMAL(10,2);
 
--  59. Rename the column 'dob' to 'birth_date'.
ALTER TABLE Employee 
CHANGE COLUMN dob  birth_date DATE;

-- 60. Add a new column 'last_updated' with a default timestamp.
ALTER TABLE Employee
ADD COLUMN last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP;















    
    



    

    

